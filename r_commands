            Commandes de base en R

?Control                - opens help about control structures (loops , condition...)
length(vector)          - length, size vector, array
unique(vector/matrix)   - nb of unique elem/colonnes-rows
for(i in 1:10){}        - loop control structure
write.table(x, "nom.ext", sep="\t"...)  - write a table in a file
print(x)                - displays x in the console
is.na(vector)           - vect of bool with 1 when NA, 0 otherwise
typeof(toto)            - gives the type of the element tested
colnames(df)            - returns a vector of the names of the columns of the df
rownames(df)            - returns a vector of the names of the row of the df
par(mfrow=c(2,2))       - subplot plots in a square matrix of 2 fashion
version                 - to get info about R version and other
head(df)                - displays first 6 rows of dataframe
tail(df)                - displays last 6 rows of dataframe
sprintf("toto %s\n",i)  - format before displaying
cat                     - concat & diplays (but not as many conversion as print)
a = data.frame(cbind(c(1,2,3),c(2,2,2)))        - toy df
str(df)                 - shows the structure of df (types, colnames...)
order(vec)              - returns vec of indexes to order vec
paste(totos, sep="")    - concatenate vectors after converting to character
glimpse/str             - to see the structure of a database

# =======================================================
# Commandes generales
# =======================================================
q() # quitter
setwd("/home/afebvre/StatsProbas/TP1") # working directory
rm(list=ls()) # supprime toutes les donnees en memoire
ls() ou objects() # liste tous les objets en memoire / List all objects in memory

# =======================================================
# Input / Output
# =======================================================
read.csv("pathName.ext", header = T/F, sep = ",", dec = ".")          # read.csv2() existe aussi, pareil mais ";" en sep par defaut
write.table(df, "pathName.ext", sep ="\t", row.names = TRUE, col.names = FALSE)  # ecrire un df dans un fichier texte


# =======================================================
# Commandes basiques
# =======================================================
= / <- / _ # assignation a une variable
M[,i:j] # pour acceder aux valeur de la matrice/vecteur/dataframe
M[Mlogique] # pour reduire une matrice a l aide d une matrice de valeurs booleenes. Si Mlog est un vecteur et M une matrice, utilise le vecteur pour parourir la matrice colonne apres colonne et donne un vecteur en sortie
a + b	#somme de a et b
a - b	#b soustrait de a
a * b	#produit de a par b
a / b	#division rÃ©elle de a par b
a %/% b	#division euclidienne (entiÃ¨re) de a par b
a %% b	#a mod b
a ^ b	#a Ã  la puissance b
sqrt (a)#racine carrÃ©e de a
abs (a)	#valeur absolue de a
log (a)	#logarithme naturel de de a
exp (a)	#exponentielle de a
sin (a)	#sinus de a (en radians)
cos (a)	#cosinus de a (en radians)
tan (a)	#tangente de a (en radians)

# Vectors
v = c(1,2,3)
v = c(v1,v2)
v = rep(v1,3)
v = seq(from,to,by)

# matrices
matrix(c(1, 2, 3, 4, 5, 6), nrow=3, ncol=2) # cree une matrice de 3 lignes, 2 colonnes
matrix(unlist(df), ncol = nbcoldedf, byrow = TRUE/FALSE) # transforme une liste en matrice pour pouvoir faire des calculs matriciels
t(M) # transposee de M
%*% # produit matriciel


# dataframes, matrices, vecteurs
Data <- read.table("covtype.data.gz",header=TRUE,sep=";", as.is=TRUE)
data.frame(do.call(rbind, strsplit(nomLargeCharact, " ", fixed=TRUE)) # separe un string et le transforme en dataframe par un delimiter (ici espace)
cbind(data, otherdata) #         de deux dataframes
rowSums/colSums(df) # fais la somme des elements d une ligne pour toutes les lignes
d[, "col3"] <- d[,"col1"]/ d[,"col2"] # ajout d une colonne egale a la division des deux premiere
d[, 3] <- d[,1]/d[,2] # idem avec appel des colonnes d une autre facon
d$new <- d$col1/d$col2 # idem
d <- transform(d,new = col1/col2) # idem
df_bis <- df[-c(1,4,7),]   # subset, drop, delete des rows 1, 4, 7 de df


# Statistiques 
summary(dataframe) # donne les stats descriptives de l objet (en positionnement)
d <- density(mtcars$mpg) # Filled Density Plot
plot(d, main="Kernel Density of Miles Per Gallon")
polygon(d, col="red", border="blue")

# Pipes %>%
f <- . %>% cos %>% sin          # To create a function
x %>% f(y)                      # equivalent to f(x, y)
x %>% f(y, .)                   # equivalent to f(y, x)
x %>% f(y, z = .)               # equivalent to f(y, z = x)
x %>% f(y = nrow(.))            # equivalent to f(x, y = nrow(x))
x %>% {f(y = nrow(.))}          # equivalent to f(y = nrow(x))
df %<>% filter(condition)       # equivalent to df <- df %>% filter(condition)
%$%                             # ???? existe mais j ai pas bien compris a quoi ca sert. A revoir

# Fonctions
myfunction <- function(arg1, arg2, ...){
    statements
    return(object)
}


# =======================================================
# PACKAGE dplyr
# =======================================================
%>%                             # pipe operator
ex : head(select(df, var1, var2)) equivalent to : df %>% select(var1, var2) %>% head
select(df, index/names/...)     # select columns
select(df, 1:3, contains('toto')...)    instead of contains also : starts_with, ends_with, matches (for regular expressions)
filter(df, cond1, cond2...)     # filter rows
filter(df, var1 %in% c("toto", "titi"))    bool op : >,<,<=,>=,!=,%in%, is.na(n)
arrange(var1, desc(var2)...)    # re order or arrange rows
mutuate(newVar = var1/var2+...) # create new columns
summarise(res = mean(var1))     # summarise values
summarise_each(funs(min(., na.rm=TRUE), max(., na.rm=TRUE)), matches("toto"))   # applies several fonctions to several columns
group_by()                      # allows for group operations in the "split-apply-combine" concept
window functions (unlike aggregation functions, result in not just one value) : ex top_n, lag, min_rank etc

# =======================================================
# PACKAGE ggplot2
# =======================================================
ggplot(aes(x, y, fill, ...) +
        geom_plotVoulu() +
        legend +
        autre truc etc

# =======================================================
# PACKAGE shiny
# =======================================================
# Create a folder with the name you want for your app and place app.R or ui.R & server.R in it. 
# Then you can call your app through the name of your folder
# 3 main components to shiny apps : ui object (user interface : layout and appearance), server fonction (instruction to build app), call to shinyApp function to create it
# The basic template for a shiny app :
library(shiny)
ui <- fluidPage()
server <- function(input, ouput, session){}
shinyApp(ui = ui, server = server)

# ============ UI - in app.R or ui.R if ui and server in two different files
# Inputs
actionButton(inputId = "Id", label = "label bouton", ...) # inputId is for internal use, label for user ui
checkboxInput()
dateInput()
sliderInput()
textInput()
numericInput()
fileInput()
etc

# Outputs
dataTableOutput()
htmlOutput()
imageOutput()
plotOutput(outputId = "hist")
tableOutput()
textOutput()
uiOutput()
verbatimTextOutput()

# ============ Server - in app.R ou server.R if ui and server in two different files
# Render functions - those functions are reactive : they actualize themselves when we change input
renderDataTable()
renderImage()
output$hist <- renderPlot({hist(data)})
renderPrint()
renderTable()
renderText()
renderUI()

input$num # to access to the inputs given by the user









ui <- fluidPage(
  h1("Hello, World!"),
  sidebarLayout(
    sidebarPanel(
      selectInput("dataset", "Choose a dataset:",       # "dataset" serves as an ID
        choices = ls("package:datasets"),               # same here
        selected = "pressure")                          # same
    ),
    mainPanel(
      tabsetPanel(
        tabPanel("Str", 
          verbatimTextOutput("dump")
        ),
        tabPanel("Plot", 
          plotOutput("plot")
        ),
        tabPanel("Table", 
          tableOutput("table")
        )
      )
    )
  )
)
server <- function(input, output, session) {
  output$dump <- renderPrint({
      dataset <- get(input$dataset, "package:datasets", inherits = FALSE)
      str(dataset)
   })
  output$plot <- renderPlot({
      dataset <- get(input$dataset, "package:datasets", inherits = FALSE)
      plot(dataset)
  })
  output$table <- renderTable({
      dataset <- get(input$dataset, "package:datasets", inherits = FALSE)
      dataset
  })
}
shinyApp(ui, server)

# =======================================================
# Exemple combinaison dplyr/ggplot2
# =======================================================
diva %>% 
  group_by(agence_tour, num_tour) %>% 
  summarise(nb_clients = n()) %>% 
  filter(nb_clients < lim_haute) %>% 
  ggplot(aes(x = nb_clients), fill = agence_tour) + 
    geom_histogram(bins = 20) +
    labs(title=titre_hist_nb_client ,x="Nombre de de clients par tournée \n (km)",y="Nombre")
df %>%
    group_by(var1) %>%
    summarise(avg_toto = mean(toto),
              max_titi = max(titi),
              total = n())

# =======================================================
# Shortcut raccourcis RStudio
# =======================================================
Ctrl+Alt+I                      # insert chunk (R notebook)
Ctrl+Shift+K                    # preview
