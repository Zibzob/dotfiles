#!/bin/bash
# This line defines wich interpreter to use (in this case a bash file .sh)

https://docs.python.org/3.4/library/  # List of the python standard library
https://pypi.org/       # List of external packages of python

# BASH SCRIPTING
###############################################################################
# VARIABLES
$
# FOR LOOP
arr=(MANDAT.pdf CONTRAT.pdf) # array definition in bash
for f in $arr;do cp -- "$f" "${f/%.pdf/test.pdf}";done
for i in 1 2 5 6
for i in {1..5}
for i in {0..50..5}
for ((i=1; i<=5; i++))
for ((;;)) # infinite loop, hit ctrl+c to stop
do
    echo $i
    echo "This is $i time super awesome"
done

wildcards : ? any single char (except leading dot), * zero or more char (idem), []class of char ( - for range, ! to exlude)

# BASH COMMANDS
###############################################################################
alt+v                   # from bash command line, to edit a command in a temp vim window/file
# TO SEARCH THROUGH COMMANDS, APPLICATIONS, USER MANUALS ETC
uniq                    # filters unique lines ?
man -k toto             # grep/search through user manuals, larger fishing in help files
cmd (alias)             # grep through all the available commands
sip/sap (alias)         # grep through all the installed/available programs of the ubuntu base
grep with regular expressions (with -i to ignore case) : '^toto'beginning line, 'toto$'end line, '\<toto\>'beginning/end word, '.toto'any one char, '[at4-7]toto'any one of the enclosed char, '[^]'any one char except those enclosed, * match zero or more of the previous char/expression, '\{x,y\}'match x to y occurences of the previous expression, '\{x\}'exactly x, '\{x,\}'x or more, '^$'blank lines

# TO GET INFORMATION ABOUT A PARTICULAR COMMAND
whatis toto             # 
info toto               # get help on all commands (or on the specific command), help to find a command (with /)
man toto                # to get info about a topic/command
toto --help             # quick help on a command and its options

# DISPLAYS THE FILES OF A DIRECTORY
ls ~/Document/toto      # run ls in the given folder
ls -1                   # in column

# READ, DISPLAYS TEXT FILES
cat path/file.ext       # display the file in the terminal, less better for big files
ccat path/file.ext      # display the file in the terminal, less better for big files (better looking than cat)
less path/file.ext      # display big file in the terminal, scroll and search (/ "toto" Enter)

# DISPLACEMENTS THROUGH DIRECTORIES
pwd                     # Print Working Directory
j toto (see autojump help) # jumps to the most likely (given usual usage) directory whose name contains "toto"
cd ~ or simply cd       # home
cd -                    # previous folder
cd /toto                # absolute path
cd /                    # root
cd ./toto               # from current folder
cd ../toto              # from parent folder

# to open recalbox shared directory in nautilus : open nautilus and in adress
# bar (ctrl-l) : smb://ipaddress/ Ex for recalbox in elbeuf : "smb://192.168.1.49/
# also from chrome : http://recalbox.local to open file manager of recalbox
cpulimit -e process_name (ex warzone2100) -l 30 # to limit the usage of a process (to 30% here for example)
du -hs                  # summary of disk usage/space of a folder/directory
ssh root@192.168.1.49   # connect to recalbox with ssh connexion, then 'yes' and 'recalboxroot' as password
vifm                    # vim file manager, terminal file manager with vim commands
nautilus, dolphin       # file managers (gui)
evince toto.pdf         # visualisation of pdf documents
openshot                # montage video
gzip (lzw)              # compression (decompression) of files
p7zipo -d toto          # decompression .7z files
printenv                # print/list/display all environment variables
!!                      # repeat command
sudo totocommand        # super user (give all rights)
sudo su                 # puts you in super user mode all the time
su aurelien             # puts you in aurelien user mode
apt-get install toto    # install toto, if toto = software present in the repository of ubuntu
# apt comes from aptitude (name of the package manager of ubuntu)
conda update -n base conda # to update conda
apt-get remove toto     # uninstall
apt-cache search toto*  # look for any packages in Ub dir with toto inside
apt-cache policy toto   # check what we have installed on our machine (about programs from Ub rep)
apt-get upgrade         # check for any upgrade for Ub soft if available
sudo dpkg -i path/name.deb # to install a package dl from internet (not available in Ub rep)
# .deb is the correct extension for Ub (dont take .rpm -> for fedora/redhat)
sudo gvim /usr/share/X11/xkb/symbols/pc # pour remap keys from keyboard
history | grep toto     # display command with toto from the history of commands
locate fichier.ext      # to locate a file (see help)
ps                      #
top                     # lists all active processus
lsusb                   # check usb port to see what is connected
lspci                   # check pci devices, if they are connected etc
lslbk                   # check disk, blocks, space
ip addr  OU ifconfig    # to check the status of your network connection
iwconfig                # to check the settings of your wireless connection
chown (-R) root:aurelien file.ext # change ownership of file:user=root and group=aurelien (R for recursive)
chown (-R) $USER file.ext # change ownership of file:user=root and group=aurelien (R for recursive)
chmod (-R) 764 file.ext      # change rights (6:r&w, 4:r) for owner(6)/group(6)/public(4), (6) = octal notation of 110 = read, write, no execute, (7) = all
rm file.ext             # remove/delete file.ext
rm -rf dir              # remove/delete directory
mkdir toto              # create directory toto
touch file.txt          # create a file without opening it
cp f1.ext path/f2.ext   # copy a file f1 in dir located at path, and name it f2.ext
mv f1.ext path/f2.ext   # move a file f1 in dir located at path, and name it f2.ext
mv dir1 dir2            # rename dir1 to dir2
find /usr/src -name '*.c' -size +100k -print
xargs grep toto < file-list # look for toto in all the files written in file-list
find . -type f/d -name "" # look/search in current dir for all files or dir respecting "toto" conditions
find . -iname "toto"    # look/search in current dir for all files/dir respecting "toto" conditions
find -size (-)1M        # look for files (under) over 1 megabyte
find -not -size (-)1M   # look for files not (under) over 1 megabyte
find -maxdepht n etc    # limit the recursive search to n dir
blkid                   # shows partitions and type of partition (ext4, swap...)
conda create --name toto python pandas scikit-learn matplotlib ipython jupyter keras seaborn # pour creer un environment python
conda create --name scrab pandas scikit-learn matplotlib ipython jupyter seaborn pyqt=4 # pour creer un environment python
conda create --name toto python pandas scikit-learn matplotlib ipython jupyter pillow h5py keras seaborn gym# pour creer un environment python
conda create --name pfr python pandas scikit-learn matplotlib ipython jupyter pillow h5py keras seaborn selenium theano lasagne # pour creer un environment python
convert toto1.jpg toto2.jpg toto.pdf # merge images into pdf
# Resize and merge images/pdf to pdf
list_input=('locataire.pdf' 'Carte identitÃ©.jpg' 'Quittance1.jpg' 'Quittance3.jpg' 'Quittance2.jpg' 'promesse_contrat_expectra.pdf' 'avis_IR.pdf' 'RIB_M_AURELIEN_FEBVRE.pdf')
list_input=('caution1.jpg' 'caution2.jpg' 'ID_papa.jpg' 'taxe_fonciere_papa.pdf' 'aout_papa.jpg' 'septembre_papa.jpg' 'octobre_papa.jpg' 'IR_papa.pdf' 'rib_papa.pdf' )
list_input=('id.jpg' 'rib2.jpg' 'c1.jpg' 'c2.jpg' 'c3.jpg' 'c4.jpg' 'c5.jpg' 'c6.jpg' 'c7.jpg')
i=150; convert ${list_input[@]} -compress jpeg -quality 70 \
      -density ${i}x${i} -units PixelsPerInch \
      -resize $((i*8.27))x$((i*11.69)) \
      -repage $((i*8.27))x$((i*11.69)) dossier_REE_AFebvre.pdf

convert -density 300 totoInput.pdf -quality 90 totoOutput.jpeg  # transform files between several different formats
for f in $(ls);do convert $f -resize 30% $f;done # rescale images from the directory
echo "toto" >> file.ext # append the string to the file (or create the file)
conda env remove -n toto # to delete python environment
smplayer                # video player interface built on mplayer http://www.smplayer.info/first-steps.php
# git and github
# git - premieres commandes quand on cree un nouveau repository
git init                # in the folder where you want to start a new git repository
git status              # to see the general information about your git repository
git log                 # list the commits done in the repository
git add file            # to the file or folder to the git versionning
git add --all *         # add all files from the current folder
git mv file dir         # move file to dir
git rm file             # delete the file from your git repository AND from your computer
git rm --cached file or -r folder # Remove file/folder from the index (to delete it only from remote repository (just push it and it's done)
# git - commandes a utiliser quand on travaille avec un repo existant (entre local et distant)
git pull pfr master     # 1st THING TO DO, update your local repository with potential commit
git commit file1 file2  # create a commit for file1 and file2 (they must have been added before)
git commit -m "toto"    # add a message to the commit of the files (that have been added)
git commit -a           # create a new commit with all changes on all files (add not necessary in this case)
git push origin master  # send the commit in the main branch "master" of the repository "origin"
git reset -hard HEAD    # NOT REVERSIBLE, cancel changes done since the last commit
git reset -hard HEAD^   # NOT REVERSIBLE, delete the last commit. Can be repeated
git revert commit       # restore the repository as it was at the specified commit
git branch toto         # create new branch named toto
git branch              # list the branches of the repository
git checkout nameBranch # go from current branch to the specified one
git merge nameBranch    # merge current branch with specified one
git remote              # list all the remote servers you have configured
git remote add bob https://github.com/Zibzob/ProjetFilRouge (.git?)     # Create an alias pointing to the address of the repository
git remote add settings https://github.com/Zibzob/main_settings.git
git remote rm bob       # delete the remote alias
git fetch bob           # get the changes of bob branch
git merge bob/master    # merge bob s changes with current branch
git pull bob            # same effect as the last two commands
cat .git/config         # writes to the terminal what is written in the config file of the git repository
git diff commit1 com2   # compare those two versions
# git suite de commandes pour mettre Ã  jour vers github (push)
ga toto.ext ou gaa      # pour add le file toto.ext, ou add all
gcam "message de commit"# pour commit les changements
gp origin master        # pour push le directory local vers le master github, il faut ensuite donner le nom du compte et le mot de passe (Zibzob, class!)

sudo -i                 # connect as root for the session
strace                  # way to attach to processes to see what they are doing
sudo fdisk -l           # to see what drives are seen by ubuntu
man hier                # lists and explain the hierarchy of the file system
cut -d':' -f2-4,5 file.txt# Cuts every line with delimiter ':' and returns fields2 to 4 and 5
wc -l file.txt          # Returns the number of lines of the file
find . -iregex '.*truc.*' 2> /dev/null# Look for a regular expression in every repo from the repo in input
baobab                  # Disk usage analyser
gnome-disks             # Mount Unmount easily disks
agi gnome-tweak-tool    # To remap the Caps Lock to the control key and many other settings
unity-tweak-tool        # Many other settings for ubuntu
grep -v 'pattern' filename # matches all but (NOT) the pattern lines
which command           # locate a command
chsh -s /usr/bin/zsh    # change the default shell (with zsh, which needs to be installed already)
sh -c blabla (voir help)# to execute from a file or something
upgrade_oh_my_zsh       # check updates for oh my zsh
j part_of_a_directory_name# move to that directory (you need first to have been at least once in that directory for it to work)
tree . -L 2             # displays the tree from given directory to the given depth
viewnior image.jpg      # Displays/shows images/pictures
pdftoppm -rx 300 -ry 300 contrat_expectra.pdf contrat -png  # convert pdf to image (jpg, png etc)
ctags -R .              # create recursively tags from the files in the current directory
iftop                   # to track/monitor/display network traffic bandwidth
nload                   # global input/output rate of the network (press enter to switch sources
nethogs                 # network incoming/outgoing traffic by source
netstat -lat            # lists the listening and established ports
pip install -r requirements.txt     # install all requirements (python packages) from the list (obtained from pip freeze
yapf                    # automate python formatting (pip install yapf, yapf toto.py > toto_clean.py)
wmctrl                  # windows control manager, to switch to a particular window
gsettings set org.gnome.desktop.wm.keybindings switch-applications-backward "['<Super>j', '<Alt>Tab']" # changes key bindings/shortcut to switch back and forth between windows/application ('switch-windows-backward')
gsettings set org.gnome.desktop.wm.keybindings switch-applications "['<Super>k']" # changes key bindings/shortcut to switch back and forth between windows
<Super>+l  /  <Super>+h # to resize window to the right/left side of the screen (super key is my window key) To change it, go in settings - devices - keyboard
Super + o               # lock the screen (log out)
super + k/j             # switch between windows (applications)
super g                 # jump to the gvim windows
rename.ul patternToChange replacementPattern files  # To rename many files at once
## List Docker CLI commands
docker
docker container --help
## Display Docker version and info
docker --version
docker version
docker info
## Execute Docker image
docker run hello-world
## List Docker images
docker image ls
## List Docker containers (running, all, all in quiet mode)
docker container ls
docker container ls --all
docker container ls -aq

# Various other info (not necessarily related to nix)
to eject hard drive from box, go to box from chrome explorer (192.168.1.1), in
the "state" tab (first tab), peripherals --> eject disk



# 0. Shortcuts.

CTRL+A  # move to beginning of line
CTRL+B  # moves backward one character
CTRL+C  # halts the current command
CTRL+D  # deletes one character backward or logs out of current session, similar to exit
CTRL+E  # moves to end of line
CTRL+F  # moves forward one character
CTRL+G  # aborts the current editing command and ring the terminal bell
CTRL+J  # same as RETURN
CTRL+K  # deletes (kill) forward to end of line
CTRL+L  # clears screen and redisplay the line
CTRL+M  # same as RETURN
CTRL+N  # next line in command history
CTRL+O  # same as RETURN, then displays next line in history file
CTRL+P  # previous line in command history
CTRL+R  # searches backward
CTRL+S  # searches forward
CTRL+T  # transposes two characters
CTRL+U  # kills backward from point to the beginning of line
CTRL+V  # makes the next character typed verbatim
CTRL+W  # kills the word behind the cursor
CTRL+X  # lists the possible filename completefions of the current word
CTRL+Y  # retrieves (yank) last item killed
CTRL+Z  # stops the current command, resume with fg in the foreground or bg in the background

DELETE  # deletes one character backward
!!      # repeats the last command
exit    # logs out of current session


# 1. Bash Basics.


export              # displays all environment variables

echo $SHELL         # displays the shell you're using
echo $BASH_VERSION  # displays bash version

bash                # if you want to use bash (type exit to go back to your normal shell)
whereis bash        # finds out where bash is on your system

clear               # clears content on window (hide displayed lines)


# 1.1. File Commands.


ls                            # lists your files
ls -l                         # lists your files in 'long format', which contains the exact size of the file, who owns the file and who has the right to look at it, and when it was last modified
ls -a                         # lists all files, including hidden files
ln -s <filename> <link>       # creates symbolic link to file
touch <filename>              # creates or updates your file
cat > <filename>              # places standard input into file
more <filename>               # shows the first part of a file (move with space and type q to quit)
head <filename>               # outputs the first 10 lines of file
tail <filename>               # outputs the last 10 lines of file (useful with -f option)
emacs <filename>              # lets you create and edit a file
mv <filename1> <filename2>    # moves a file
cp <filename1> <filename2>    # copies a file
rm <filename>                 # removes a file
diff <filename1> <filename2>  # compares files, and shows where they differ
wc <filename>                 # tells you how many lines, words and characters there are in a file
chmod -options <filename>     # lets you change the read, write, and execute permissions on your files
gzip <filename>               # compresses files
gunzip <filename>             # uncompresses files compressed by gzip
gzcat <filename>              # lets you look at gzipped file without actually having to gunzip it
lpr <filename>                # print the file
lpq                           # check out the printer queue
lprm <jobnumber>              # remove something from the printer queue
genscript                     # converts plain text files into postscript for printing and gives you some options for formatting
dvips <filename>              # print .dvi files (i.e. files produced by LaTeX)
grep <pattern> <filenames>    # looks for the string in the files
grep -r <pattern> <dir>       # search recursively for pattern in directory


# 1.2. Directory Commands.


mkdir <dirname>  # makes a new directory
cd               # changes to home
cd <dirname>     # changes directory
pwd              # tells you where you currently are


# 1.3. SSH, System Info & Network Commands.


ssh user@host            # connects to host as user
ssh -p <port> user@host  # connects to host on specified port as user
ssh-copy-id user@host    # adds your ssh key to host for user to enable a keyed or passwordless login

whoami                   # returns your username
passwd                   # lets you change your password
quota -v                 # shows what your disk quota is
date                     # shows the current date and time
cal                      # shows the month's calendar
uptime                   # shows current uptime
w                        # displays whois online
finger <user>            # displays information about user
uname -a                 # shows kernel information
man <command>            # shows the manual for specified command
df                       # shows disk usage
du <filename>            # shows the disk usage of the files and directories in filename (du -s give only a total)
du -chd1 Documents | sort -rh | head # disk usage with options "total, human readable, to 1 level down", and pipe to sort it (reversed and human)
last <yourUsername>      # lists your last logins
ps -u yourusername       # lists your processes
kill <PID>               # kills (ends) the processes with the ID you gave
killall <processname>    # kill all processes with the name
top                      # displays your currently active processes
bg                       # lists stopped or background jobs ; resume a stopped job in the background
fg                       # brings the most recent job in the foreground
fg <job>                 # brings job to the foreground

ping <host>              # pings host and outputs results
whois <domain>           # gets whois information for domain
dig <domain>             # gets DNS information for domain
dig -x <host>            # reverses lookup host
wget <file>              # downloads file


# 2. Basic Shell Programming.


# 2.1. Variables.


varname=value                # defines a variable
varname=value command        # defines a variable to be in the environment of a particular subprocess
echo $varname                # checks a variable's value
echo $$                      # prints process ID of the current shell
echo $!                      # prints process ID of the most recently invoked background job
echo $?                      # displays the exit status of the last command
export VARNAME=value         # defines an environment variable (will be available in subprocesses)

array[0] = val               # several ways to define an array
array[1] = val
array[2] = val
array=([2]=val [0]=val [1]=val)
array(val val val)

${array[i]}                  # displays array's value for this index. If no index is supplied, array element 0 is assumed
${#array[i]}                 # to find out the length of any element in the array
${#array[@]}                 # to find out how many values there are in the array

declare -a                   # the variables are treaded as arrays
declare -f                   # uses funtion names only
declare -F                   # displays function names without definitions
declare -i                   # the variables are treaded as integers
declare -r                   # makes the variables read-only
declare -x                   # marks the variables for export via the environment

${varname:-word}             # if varname exists and isn't null, return its value; otherwise return word
${varname:=word}             # if varname exists and isn't null, return its value; otherwise set it word and then return its value
${varname:?message}          # if varname exists and isn't null, return its value; otherwise print varname, followed by message and abort the current command or script
${varname:+word}             # if varname exists and isn't null, return word; otherwise return null
${varname:offset:length}     # performs substring expansion. It returns the substring of $varname starting at offset and up to length characters

${variable#pattern}          # if the pattern matches the beginning of the variable's value, delete the shortest part that matches and return the rest
${variable##pattern}         # if the pattern matches the beginning of the variable's value, delete the longest part that matches and return the rest
${variable%pattern}          # if the pattern matches the end of the variable's value, delete the shortest part that matches and return the rest
${variable%%pattern}         # if the pattern matches the end of the variable's value, delete the longest part that matches and return the rest
${variable/pattern/string}   # the longest match to pattern in variable is replaced by string. Only the first match is replaced
${variable//pattern/string}  # the longest match to pattern in variable is replaced by string. All matches are replaced

${#varname}                  # returns the length of the value of the variable as a character string

*(patternlist)               # matches zero or more occurences of the given patterns
+(patternlist)               # matches one or more occurences of the given patterns
?(patternlist)               # matches zero or one occurence of the given patterns
@(patternlist)               # matches exactly one of the given patterns
!(patternlist)               # matches anything except one of the given patterns

$(UNIX command)              # command substitution: runs the command and returns standard output


# 2.2. Functions.
# The function refers to passed arguments by position (as if they were positional parameters), that is, $1, $2, and so forth.
# $@ is equal to "$1" "$2"... "$N", where N is the number of positional parameters. $# holds the number of positional parameters.


functname() {
  shell commands
}

unset -f functname  # deletes a function definition
declare -f          # displays all defined functions in your login session


# 2.3. Flow Control.


statement1 && statement2  # and operator
statement1 || statement2  # or operator

-a                        # and operator inside a test conditional expression
-o                        # or operator inside a test conditional expression

str1=str2                 # str1 matches str2
str1!=str2                # str1 does not match str2
str1<str2                 # str1 is less than str2
str1>str2                 # str1 is greater than str2
-n str1                   # str1 is not null (has length greater than 0)
-z str1                   # str1 is null (has length 0)

-a file                   # file exists
-d file                   # file exists and is a directory
-e file                   # file exists; same -a
-f file                   # file exists and is a regular file (i.e., not a directory or other special type of file)
-r file                   # you have read permission
-r file                   # file exists and is not empty
-w file                   # your have write permission
-x file                   # you have execute permission on file, or directory search permission if it is a directory
-N file                   # file was modified since it was last read
-O file                   # you own file
-G file                   # file's group ID matches yours (or one of yours, if you are in multiple groups)
file1 -nt file2           # file1 is newer than file2
file1 -ot file2           # file1 is older than file2

-lt                       # less than
-le                       # less than or equal
-eq                       # equal
-ge                       # greater than or equal
-gt                       # greater than
-ne                       # not equal

if condition
then
  statements
[elif condition
  then statements...]
[else
  statements]
fi

for x := 1 to 10 do
begin
  statements
end

for name [in list]
do
  statements that can use $name
done

for (( initialisation ; ending condition ; update ))
do
  statements...
done

case expression in
  pattern1 )
    statements ;;
  pattern2 )
    statements ;;
  ...
esac

select name [in list]
do
  statements that can use $name
done

while condition; do
  statements
done

until condition; do
  statements
done


# 3. Command-Line Processing Cycle.


# The default order for command lookup is functions, followed by built-ins, with scripts and executables last.
# There are three built-ins that you can use to override this order: `command`, `builtin` and `enable`.

command  # removes alias and function lookup. Only built-ins and commands found in the search path are executed
builtin  # looks up only built-in commands, ignoring functions and commands found in PATH
enable   # enables and disables shell built-ins

eval     # takes arguments and run them through the command-line processing steps all over again


# 4. Input/Output Redirectors.


cmd1|cmd2  # pipe; takes standard output of cmd1 as standard input to cmd2
> file     # directs standard output to file
< file     # takes standard input from file
>> file    # directs standard output to file; append to file if it already exists
>|file     # forces standard output to file even if noclobber is set
n>|file    # forces output to file from file descriptor n even if noclobber is set
<> file    # uses file as both standard input and standard output
n<>file    # uses file as both input and output for file descriptor n
#<<label    # here-document
n>file     # directs file descriptor n to file
n<file     # takes file descriptor n from file
n>>file    # directs file description n to file; append to file if it already exists
n>&        # duplicates standard output to file descriptor n
n<&        # duplicates standard input from file descriptor n
n>&m       # file descriptor n is made to be a copy of the output file descriptor
n<&m       # file descriptor n is made to be a copy of the input file descriptor
&>file     # directs standard output and standard error to file
<&-        # closes the standard input
>&-        # closes the standard output
n>&-       # closes the ouput from file descriptor n
n<&-       # closes the input from file descripor n


# 5. Process Handling.


# To suspend a job, type CTRL+Z while it is running. You can also suspend a job with CTRL+Y.
# This is slightly different from CTRL+Z in that the process is only stopped when it attempts to read input from terminal.
# Of course, to interupt a job, type CTRL+C.

myCommand &  # runs job in the background and prompts back the shell

jobs         # lists all jobs (use with -l to see associated PID)

fg           # brings a background job into the foreground
fg %+        # brings most recently invoked background job
fg %-        # brings second most recently invoked background job
fg %N        # brings job number N
fg %string   # brings job whose command begins with string
fg %?string  # brings job whose command contains string

kill -l      # returns a list of all signals on the system, by name and number
kill PID     # terminates process with specified PID

ps           # prints a line of information about the current running login shell and any processes running under it
ps -a        # selects all processes with a tty except session leaders

trap cmd sig1 sig2  # executes a command when a signal is received by the script
trap "" sig1 sig2   # ignores that signals
trap - sig1 sig2    # resets the action taken when the signal is received to the default

disown <PID|JID>    # removes the process from the list of jobs

wait                # waits until all background jobs have finished


# 6. Tips and Tricks.


# set an alias
cd; nano .bash_profile
> alias gentlenode='ssh admin@gentlenode.com -p 3404'  # add your alias in .bash_profile

# to quickly go to a specific directory
cd; nano .bashrc
> shopt -s cdable_vars
> export websites="/Users/mac/Documents/websites"

source .bashrc
cd websites


# 7. Debugging Shell Programs.


bash -n scriptname  # don't run commands; check for syntax errors only
set -o noexec       # alternative (set option in script)

bash -v scriptname  # echo commands before running them
set -o verbose      # alternative (set option in script)

bash -x scriptname  # echo commands after command-line processing
set -o xtrace       # alternative (set option in script)

trap 'echo $varname' EXIT  # useful when you want to print out the values of variables at the point that your script exits

function errtrap {
  es=$?
  echo "ERROR line $1: Command exited with status $es."
}

trap 'errtrap $LINENO' ERR  # is run whenever a command in the surrounding script or function exists with non-zero status 

function dbgtrap {
  echo "badvar is $badvar"
}

trap dbgtrap DEBUG  # causes the trap code to be executed before every statement in a function or script
# ...section of code in which the problem occurs...
trap - DEBUG  # turn off the DEBUG trap

function returntrap {
  echo "A return occured"
}

trap returntrap RETURN  # is executed each time a shell function or a script executed with the . or source commands finishes executing
